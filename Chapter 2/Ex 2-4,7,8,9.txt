4.
(defun greater (a b)
                   (if (< a b) b a))
                   
7.
(defun has-list-p (ls)
              (if (null ls)
                  nil
                (or (listp (car ls))
                    (has-list-p (cdr ls)))))

8. a
; iteration
 (defun print-dots (p-number)
               (do ((i 0 (+ i 1)))
               ((>= i p-number) 'done)
               (format t ".")))

; recursion
(defun print-dots (p-number)
                   (if (= 0 p-number)
                       'done
                     (progn (format t ".")
                          (print-dots (- p-number 1)))))

8. b
; iteration
(defun get-a-count (ls)
                        (let ((count 0))
                          (dolist (obj ls)
                            (and (equal obj 'a)
                                 (setf count (+ count 1))))
                        count))

;recursion
(defun get-a-count (ls)
              (if (null ls)
                  0
                (if (equal (car ls) 'a)
                    (+ (get-a-count (cdr ls)) 1)
                  (get-a-count (cdr ls)))))

9. a
The 1st was not changed after remove function, the removed list is the return value of remove function.
(defun summit (1st)
                   (apply #'+ (remove nil 1st)))

9. b
The recursion does not have an exit, which means the function will never end.
(defun summit (1st)
                   (if 1st
                       (let ((x (car 1st)))
                         (if (null x)
                            (summit (cdr 1st))
                           (+ x (summit (cdr 1st)))))
                     0))